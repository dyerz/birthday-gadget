<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs title="__UP_title__"
  directory_title="__MSG_title__"
  description="__MSG_description__"
  screenshot="http://birthday-gadget.googlecode.com/svn/trunk/screenshot.png"
  thumbnail="http://birthday-gadget.googlecode.com/svn/trunk/thumbnail.png"
  author="Adam"
  author_email="birthdaygadget@gmail.com"
  height="100">
    <Locale messages="http://birthday-gadget.googlecode.com/svn/trunk/new/bd_content/ALL_ALL.xml" />
    <Require feature="idi" /> 
    <Require feature="locked-domain" /> 
    <Require feature="analytics" /> 
    <Require feature="dynamic-height" />
    <Require feature="setprefs"/>
    <Require feature="minimessage"/>
</ModulePrefs>
<UserPref name="title" display_name="__MSG_titleName__" default_value="__MSG_title__" />
<UserPref name="dateFormat" display_name="__MSG_formatName__" default_value="0" datatype="enum" >
  <EnumValue value="0" display_value="MMM DD" />
  <EnumValue value="1" display_value="DD MMM" />
  <EnumValue value="2" display_value="MM/DD" />
  <EnumValue value="3" display_value="DD/MM" />
</UserPref>
<UserPref name="showBDay" display_name="__MSG_showName__" default_value="5" datatype="enum" >
  <EnumValue value="1" />
  <EnumValue value="2" />
  <EnumValue value="3" />
  <EnumValue value="4" />
  <EnumValue value="5" />
  <EnumValue value="6" />
  <EnumValue value="7" />
  <EnumValue value="8" />
  <EnumValue value="9" />
  <EnumValue value="10" />
  <EnumValue value="0" display_value="All" />
</UserPref>
<UserPref name="warn_past" display_name="__MSG_pastNoticeName__" default_value="0" datatype="enum" >
  <EnumValue value="0" />
  <EnumValue value="3" />
  <EnumValue value="7" />
  <EnumValue value="10" />
  <EnumValue value="14" />
</UserPref>
<UserPref name="warn_forward" display_name="__MSG_futureNoticeName__" default_value="7" datatype="enum" >
  <EnumValue value="3" />
  <EnumValue value="7" />
  <EnumValue value="10" />
  <EnumValue value="14" />
  <EnumValue value="21" />
  <EnumValue value="30" />
  <EnumValue value="60" />
  <EnumValue value="90" /> 
  <EnumValue value="0" display_value="All" /> 
</UserPref>
<UserPref name="_table_query_url" display_name="Data source url" required="true" /> 
<Content type="html">
<![CDATA[ 

  <style>
  table {
    border:2px solid black;
    border-collapse: collapse; 
  }

  td {
    border: 1px solid silver;
    padding: 2px;
    font-size: 11px;
  }

  .rowind {
    color: #808080;
    text-align: right;
  }

  .colid {
    background-color: #cccccc;
    text-align: center;
  }

  .label {
    font-weight: bold;
    background-color: #eff3fc;
    text-align: center;
  }

  .checkmark {
    font-family: Arial Unicode MS, Arial, Verdana, Helvetica;
  }

  </style>

  <!-- Load the Google common loader, that is later used to load the Visualization API. -->
  <script src="http://www.google.com/jsapi" type="text/javascript"></script>

  <div id="tablediv" style="overflow: auto;">Loading...</div>

  <script>
    // Load the Google Visualization API
    google.load("visualization", "1");
    var gadgetHelper = null;

    /**
     * Create a query from the user prefs, and then send it to the data source.
     * This method is called once the visualization API is fully loaded.
     * Note that in the last line, a callback function is specified to be
     * called once the response is received from the data source.
     */
    function sendQuery() {
      var prefs = new _IG_Prefs(); // User preferences
      gadgetHelper = new google.visualization.GadgetHelper();
      var query = gadgetHelper.createQueryFromPrefs(prefs);
      query.send(handleQueryResponse);
    }

    /**
     * Query response handler function.
     * Called by the Google Visualization API once the response is received.
     * Takes the query response and formats it as a table.
     */
    function handleQueryResponse(response) {
      // Use the visualization GadgetHelper class to validate the data, and
      // for error handling.
      if (!gadgetHelper.validateResponse(response)) {
        // Default error handling was done, just leave.
        return;
      };

      // Take the data table from the response, and format it. 
      var data = response.getDataTable();
      var html = [];
      var rowDate, age=0;
      
      html.push('<table cellpaddind="0" cellspacing="0">');

      // Header row for column Ids
      html.push('<tr class="colid">');
      html.push('<td>Date</td><td>Name</td><td>Age</td>');
      html.push('</tr>');



      // Add the data rows
      for (var row = 0; row < data.getNumberOfRows(); row++) {
        html.push('<tr>');
        for (var col = 0; col < 2; col++) {
          html.push('<td>');
          var formattedValue = data.getFormattedValue(row, col);
          formattedValue = escapeHtml(formattedValue);
          html.push(formattedValue);
          html.push('</td>');
        }
        rowDate=Date.parse(data.getFormattedValue(row, 0));
        if(isNaN(rowDate)) alert("Date Error");
        age=makeAge(rowDate);
        
        html.push('<td>'+age+'</td>');
        html.push('</tr>');
      }
      html.push('</table>');

      // Set the generated html into the container div.
      _gel('tablediv').innerHTML = html.join('');
    };

    /**
     * Escape special html characters to prevent data that contains characters
     * like '<' or '>' to mess up the generated html.
     */
    function escapeHtml(text) {
      if (text == null) {
        return '';
      }
      return text.replace(/&/g, '&amp;').
          replace(/</g, '&lt;').
          replace(/>/g, '&gt;').
          replace(/"/g, '&quot;');
    }

    function makeAge(rowDate){
      var d=new Date(); var p=new Date(); p.setTime(rowDate); 
      var age=d.getFullYear()-p.getFullYear();
      if(d.getMonth()>p.getMonth()) age--;
      else if(d.getMonth()==p.getMonth() && d.getDate()>=p.getDate()) age--;
      return(age++);
    
    
    }

    // Set the table size.
    _gel('tablediv').style.height = (document.body.clientHeight - 2) + 'px';
    _gel('tablediv').style.width = '100%';
    
    // Set a callback function to be called by the loader once the visualization API is loaded.
    google.setOnLoadCallback(sendQuery);

  </script>

  

  ]]> 
</Content>
</Module>
